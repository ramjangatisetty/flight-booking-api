{
  "openapi": "3.0.0",
  "info": {
    "title": "Flight Booking API",
    "version": "1.1.0",
    "description": "A production-grade REST API for flight booking and enterprise API automation practice."
  },
  "servers": [
    { "url": "http://localhost:3000/api/v1" }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "email": { "type": "string" },
          "password": { "type": "string" },
          "phone": { "type": "string" },
          "role": { "type": "string" }
        }
      },
      "Flight": {
        "type": "object",
        "properties": {
          "flightNumber": { "type": "string" },
          "source": { "type": "string" },
          "destination": { "type": "string" },
          "departure": { "type": "string", "format": "date-time" },
          "arrival": { "type": "string", "format": "date-time" },
          "duration": { "type": "string" },
          "class": { "type": "array", "items": { "type": "string" } },
          "price": { "type": "number" },
          "currency": { "type": "string" },
          "seatsAvailable": { "type": "integer" },
          "isActive": { "type": "boolean" }
        }
      },
      "Passenger": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "age": { "type": "integer" },
          "passport": { "type": "string" },
          "seat": { "type": "string" }
        }
      },
      "Booking": {
        "type": "object",
        "properties": {
          "user": { "type": "string" },
          "flight": { "type": "string" },
          "passengers": { "type": "array", "items": { "$ref": "#/components/schemas/Passenger" } },
          "status": { "type": "string", "enum": ["pending", "confirmed", "cancelled", "failed"] },
          "paymentStatus": { "type": "string", "enum": ["pending", "successful", "failed"] }
        }
      },
      "Payment": {
        "type": "object",
        "properties": {
          "booking": { "type": "string" },
          "amount": { "type": "number" },
          "currency": { "type": "string" },
          "status": { "type": "string", "enum": ["pending", "successful", "failed"] },
          "method": { "type": "string" }
        }
      }
    }
  },
  "security": [
    { "bearerAuth": [] },
    { "ApiKeyAuth": [] }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "summary": "Register new user",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/User" } }
          }
        },
        "responses": {
          "201": { "description": "User registered" },
          "409": { "description": "User already exists" }
        }
      }
    },
    "/users/login": {
      "post": {
        "summary": "User login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string" },
                  "password": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Login success, JWT returned" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get my profile",
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "User info" } }
      }
    },
    "/users": {
      "get": {
        "summary": "List all users (admin)",
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "List of users" } }
      }
    },
    "/users/me/request-2fa": {
      "post": {
        "summary": "Request 2FA code (email/SMS)",
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "2FA code sent" } }
      }
    },
    "/users/impersonate": {
      "post": {
        "summary": "Impersonate another user (admin/support)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "userId": { "type": "string" } } }
            }
          }
        },
        "responses": {
          "200": { "description": "Impersonation JWT" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/flights": {
      "get": {
        "summary": "List flights (with filtering/pagination)",
        "parameters": [
          { "name": "source", "in": "query", "schema": { "type": "string" } },
          { "name": "destination", "in": "query", "schema": { "type": "string" } },
          { "name": "page", "in": "query", "schema": { "type": "integer" } },
          { "name": "limit", "in": "query", "schema": { "type": "integer" } }
        ],
        "responses": { "200": { "description": "List of flights" } }
      },
      "post": {
        "summary": "Create flight (admin/flight_manager)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Flight" } }
          }
        },
        "responses": { "201": { "description": "Flight created" } }
      }
    },
    "/flights/bulk": {
      "post": {
        "summary": "Bulk create flights (admin/flight_manager)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Flight" } }
            }
          }
        },
        "responses": { "201": { "description": "Flights created" }, "207": { "description": "Partial success" } }
      }
    },
    "/flights/{id}": {
      "get": {
        "summary": "Get flight by ID",
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
        "responses": { "200": { "description": "Flight info" }, "404": { "description": "Not found" } }
      },
      "put": {
        "summary": "Update flight",
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Flight" } }
          }
        },
        "responses": { "200": { "description": "Flight updated" }, "404": { "description": "Not found" } }
      },
      "delete": {
        "summary": "Soft delete flight",
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
        "responses": { "200": { "description": "Flight soft deleted" }, "404": { "description": "Not found" } }
      }
    },
    "/flights/{id}/restore": {
      "post": {
        "summary": "Restore flight",
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
        "responses": { "200": { "description": "Flight restored" }, "404": { "description": "Not found" } }
      }
    },
    "/bookings": {
      "post": {
        "summary": "Create booking",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Booking" } }
          }
        },
        "responses": { "201": { "description": "Booking created" } }
      },
      "get": {
        "summary": "List all bookings (admin)",
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "List of bookings" } }
      }
    },
    "/bookings/me": {
      "get": {
        "summary": "Get my bookings",
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "List of bookings" } }
      }
    },
    "/bookings/{id}": {
      "delete": {
        "summary": "Soft delete booking",
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
        "responses": { "200": { "description": "Booking soft deleted" } }
      }
    },
    "/bookings/{id}/restore": {
      "post": {
        "summary": "Restore booking",
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
        "responses": { "200": { "description": "Booking restored" } }
      }
    },
    "/bookings/{id}/cancel": {
      "patch": {
        "summary": "Cancel booking",
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
        "responses": { "200": { "description": "Booking cancelled" } }
      }
    },
    "/bookings/{id}/status": {
      "get": {
        "summary": "Get booking/payment status (for async polling)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
        "responses": { "200": { "description": "Status info" } }
      }
    },
    "/bookings/{id}/confirm-2fa": {
      "post": {
        "summary": "Confirm booking with 2FA",
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "code": { "type": "string" } } }
            }
          }
        },
        "responses": {
          "200": { "description": "Booking confirmed" },
          "401": { "description": "Invalid/expired 2FA code" }
        }
      }
    },
    "/bookings/{id}/upload": {
      "post": {
        "summary": "Upload a file for booking",
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": { "file": { "type": "string", "format": "binary" } }
              }
            }
          }
        },
        "responses": { "201": { "description": "File uploaded" } }
      }
    },
    "/bookings/{id}/files": {
      "get": {
        "summary": "List files for a booking",
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
        "responses": { "200": { "description": "List of files" } }
      }
    },
    "/bookings/{id}/files/{fileId}": {
      "get": {
        "summary": "Download file for a booking",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "fileId", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": { "200": { "description": "File download" } }
      }
    },
    "/payments/async": {
      "post": {
        "summary": "Simulate async payment (pending then success/fail)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bookingId": { "type": "string" },
                  "amount": { "type": "number" },
                  "status": { "type": "string", "enum": ["successful", "failed"] }
                }
              }
            }
          }
        },
        "responses": { "202": { "description": "Payment processing started" } }
      }
    },
    "/apikeys": {
      "post": {
        "summary": "Create new API key",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "scopes": { "type": "array", "items": { "type": "string" } } }
              }
            }
          }
        },
        "responses": { "201": { "description": "API key created" } }
      },
      "get": {
        "summary": "List my API keys",
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "List of keys" } }
      }
    },
    "/apikeys/{id}": {
      "delete": {
        "summary": "Revoke API key",
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": { "200": { "description": "API key revoked" } }
      }
    },
    "/export/bookings": {
      "post": {
        "summary": "Export bookings as CSV (async job)",
        "security": [{ "bearerAuth": [] }],
        "responses": { "202": { "description": "Export job started" } }
      }
    },
    "/export/jobs/{id}": {
      "get": {
        "summary": "Get export job status/download",
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": { "200": { "description": "Export job status" } }
      }
    },
    "/audit": {
      "get": {
        "summary": "List audit logs (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "user", "in": "query", "schema": { "type": "string" } },
          { "name": "resource", "in": "query", "schema": { "type": "string" } },
          { "name": "action", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": { "200": { "description": "List of logs" } }
      }
    },
    "/audit/{id}": {
      "get": {
        "summary": "Get audit log by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": { "200": { "description": "Audit log" } }
      }
    },
    "/webhooks/register": {
      "post": {
        "summary": "Register webhook (admin)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": { "type": "string" },
                  "event": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": { "201": { "description": "Webhook registered" } }
      }
    },
    "/webhooks": {
      "get": {
        "summary": "List all webhooks (admin)",
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "List of webhooks" } }
      }
    },
    "/webhooks/{id}": {
      "delete": {
        "summary": "Delete webhook (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": { "200": { "description": "Webhook deleted" } }
      }
    },
    "/oauth/register-client": {
      "post": {
        "summary": "Register OAuth2 client (admin)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "redirectUris": { "type": "array", "items": { "type": "string" } },
                  "scopes": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": { "201": { "description": "OAuth client registered" } }
      }
    },
    "/oauth/authorize": {
      "get": {
        "summary": "OAuth2: Authorize endpoint",
        "parameters": [
          { "name": "client_id", "in": "query", "schema": { "type": "string" }, "required": true },
          { "name": "redirect_uri", "in": "query", "schema": { "type": "string" }, "required": true },
          { "name": "scope", "in": "query", "schema": { "type": "string" }, "required": true },
          { "name": "response_type", "in": "query", "schema": { "type": "string", "enum": ["code"] }, "required": true }
        ],
        "responses": { "302": { "description": "Redirect with code" } }
      }
    },
    "/oauth/token": {
      "post": {
        "summary": "OAuth2: Token endpoint",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": { "type": "string" },
                  "client_id": { "type": "string" },
                  "client_secret": { "type": "string" },
                  "redirect_uri": { "type": "string" },
                  "grant_type": { "type": "string", "enum": ["authorization_code", "refresh_token"] }
                }
              }
            }
          }
        },
        "responses": { "200": { "description": "Access and refresh token" } }
      }
    },
    "/oauth/userinfo": {
      "get": {
        "summary": "OAuth2 userinfo endpoint",
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "User info" } }
      }
    },
    "/info": {
      "get": {
        "summary": "API info (versions, deprecation, build)",
        "responses": { "200": { "description": "Info" } }
      }
    },
    "/health": {
      "get": {
        "summary": "Health check",
        "responses": { "200": { "description": "API healthy" } }
      }
    }
  }
}
